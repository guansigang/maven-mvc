<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>maven-mvc-web</display-name>
  	<!--加载顺序说明
	首先可以肯定的是，加载顺序与它们在 web.xml 文件中的先后顺序无关。即不会因为 filter 写在 listener 的前面而会先加载 filter。
	最终得出的结论是：ServletContext -> listener -> filter -> servlet 
	 同时还存在着这样一种配置节：context-param，它用于向 ServletContext 提供键值对，即应用程序上下文信息。
	 我们的 listener, filter 等在初始化时会用到这些上下文中的信息，那么 context-param 配置节是不是应该写在 listener 配置节前呢？实际上 context-param 配置节可写在任意位置，因此真正的加载顺序为：context-param -> listener -> filter -> servlet
	对于某类配置节而言，与它们出现的顺序是有关的。以 filter 为例，web.xml 中当然可以定义多个 filter，与 filter 相关的一个配置节是 filter-mapping，这里一定要注意，对于拥有相同 filter-name 的 filter 和 filter-mapping 配置节而言，filter-mapping 必须出现在 filter 之后，否则当解析到 filter-mapping 时，它所对应的 filter-name 还未定义。web 容器启动时初始化每个 filter 时，是按照 filter 配置节出现的顺序来初始化的，当请求资源匹配多个 filter-mapping 时，filter 拦截资源是按照 filter-mapping 配置节出现的顺序来依次调用 doFilter() 方法的。
    servlet 同 filter 类似，此处不再赘述。 由此，可以看出，web.xml 的加载顺序是：ServletContext -> context-param -> listener -> filter -> servlet ，而同个类型之间的实际程序调用的时候的顺序是根据对应的 mapping 的顺序进行调用的。-->
    
    <!-- 解决工程编码过滤器 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
	<!--权限过滤器 -->
    <filter>
	    <filter-name>shiroFilter</filter-name>
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	    <init-param>
	      <param-name>targetFilterLifecycle</param-name>
	      <param-value>true</param-value>
	    </init-param>
  	</filter>
  	<filter-mapping>
	    <filter-name>shiroFilter</filter-name>
	    <url-pattern>/*</url-pattern>
  	</filter-mapping>
	<!--测试 -->
    <filter>
        <filter-name>Test Filter</filter-name>
        <filter-class>com.test.filter.TestFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>Test Filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    
    <!-- 配置文件所在位置 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:xmls-config/spring.xml
        			,classpath:xmls-config/mybatis-spring.xml
        			,classpath:xmls-config/spring-shiro-config.xml</param-value>
    </context-param>
    <!-- Spring配置（监听器） -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!-- SpringMVC配置 -->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:xmls-config/spring-mvc-config.xml</param-value>
        </init-param>
		<!--Load-on-startup 元素在web应用启动的时候指定了servlet被加载的顺序，它的值必须是一个整数。如果它的值是一个负整数或是这个元素不存在，那么容器会在该servlet被调用的时候，加载这个servlet 。
		如果值是正整数或零，容器在配置的时候就加载并初始化这个servlet，容器必须保证值小的先被加载。如果值相等，容器可以自动选择先加载谁 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    
    
    
    
    
    <!-- servlet演示 -->
    <servlet>
    	<description>servlet 功能演示</description>
    	<display-name>this is display_name of my J2EE component</display-name>
        <servlet-name>ServletDemo1</servlet-name>
        <servlet-class>com.servlet.ServletDemo1</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo1</servlet-name>
        <url-pattern>/servlet/ServletDemo1</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>ServletDemo1</servlet-name>
        <url-pattern>/servlet/ServletDemo2</url-pattern>
    </servlet-mapping>
    
    <!-- 验证码演示 -->
    <servlet>
    	<description>验证码展示</description>
    	<display-name>this is display_name of my J2EE component</display-name>
        <servlet-name>authcode1</servlet-name>
        <servlet-class>com.servlet.DrawImage</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>authcode1</servlet-name>
        <url-pattern>/servlet/authcode1</url-pattern>
    </servlet-mapping>
    
    
    <!-- 验证码校验 -->
    <servlet>
    	<description>验证码校验</description>
    	<display-name>this is display_name of my J2EE component</display-name>
        <servlet-name>authcode2</servlet-name>
        <servlet-class>com.servlet.CheckServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>authcode2</servlet-name>
        <url-pattern>/servlet/authcode2</url-pattern>
    </servlet-mapping>
    
    
    
    <welcome-file-list>
<!--       <welcome-file>views/jsp/login.jsp</welcome-file> -->
<!--       <welcome-file>views/jsp/login.html</welcome-file> -->
<!--       <welcome-file>login</welcome-file> -->
<!--       <welcome-file>login.jsp</welcome-file> -->
      <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>